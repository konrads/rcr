#!/bin/bash

red="\033[31m";
green="\033[32m";
yellow="\033[33m";
blue="\033[34m";
magenta="\033[35m";
cyan="\033[36m";
white="\033[37m";
norm="\033[0m";
bold="\033[1m";
under="\033[4m";
reset="\033[0m";

banner() {
    echo
    echo -e "${bold}${white}[${green}DEV${white}]"
    echo -e "${white}          _           _            "
    echo -e "${white}      ___| |_   _ ___| |_ ___ _ __ "
    echo -e "${white}     / __| | | | / __| __/ _ \ '__|"
    echo -e "${white}    | (__| | |_| \__ \ ||  __/ |   "
    echo -e "${white}     \___|_|\__,_|___/\__\___|_|   ${bold}${white}[${blue}tools${white}]"
    echo
}

header() {
    cmd=$*
    echo
    echo -e "    ${bold}${blue}cmd:${reset}${white} ${green} $cmd ${white} :>${reset}${white}" 1>&2;
    echo
}

ok() {
    echo
    echo -e "    ${bold}${blue}done!${reset}" 1>&2;
    echo
}

usage() {
    echo -e "${bold}${white}\tUsage:${reset} " 1>&2;
    echo
    echo -e "\t${bold}${blue}$0${norm}${green} <cmd> [<args> ...]\t${bold}${yellow}where:${norm}${white}"
    echo
    echo -e "\t${bold}${blue}     <none>\t\t ${norm}${white}-- Get ${bold}this${norm}${white} help"
    echo -e "\t${bold}${blue}     help\t\t ${norm}${white}-- Get ${bold}this${white} help"
    echo -e "\t${bold}${blue}     regenerate\t\t ${norm}${white}-- (Re)generate dev cluster"
    echo -e "\t${bold}${blue}     start\t\t ${norm}${white}-- Start ${bold}${white}all${reset}${white} cluster nodes"
    echo -e "\t${bold}${blue}     stop\t\t ${norm}${white}-- Stop ${bold}${white}all${reset}${white} cluster nodes"
    echo -e "\t${bold}${blue}     restart\t\t ${norm}${white}-- Restart ${bold}${white}all${reset}${white} cluster nodes"
    echo -e "\t${bold}${blue}     join\t\t ${norm}${white}-- Join ${bold}${white}all${reset}${white} nodes into a cluster"
    echo -e "\t${bold}${blue}     leave\t\t ${norm}${white}-- Dismember cluster"
    echo -e "\t${bold}${blue}     version\t\t ${norm}${white}-- Random VNode version"
    echo -e "\t${bold}${blue}     vping\t\t ${norm}${white}-- Random VNode ping"
    echo -e "\t${bold}${blue}     ping\t\t ${norm}${white}-- Erlang VM ping of all nodes"
    echo -e "\t${bold}${blue}     dumpy\t\t ${norm}${white}-- Analyse Erlang crash dumps"
    echo -e "\t${bold}${blue}     deps\t\t ${norm}${white}-- Convert application deps to graphviz dot, png, svg "
    echo -e "\t${bold}${blue}     diag\t\t ${norm}${white}-- Cluster diagnostics"
    echo -e "\t${bold}${blue}     cluster_info\t ${norm}${white}-- Cluster status dump"
    echo -e "\t${bold}${blue}     attach [n1|n2|n3]\t ${norm}${white}-- Attach to a cluster node"
    echo -e "\t${bold}${blue}     console [n1|n2|n3]\t ${norm}${white}-- Start console mode cluster node"
    echo
    exit 2
}

banner
if [ "$#" -eq "0" ];
then
    usage
    exit 0
fi

script=$1

case $script in
    regenerate)
        header $*
        rm -rf _cluster
        make relx-cluster
        ;;
    start)
        header $*
        for w in _cluster/n*; do
            echo "Starting node : `basename $w` `WHIZZ_CLUSTERING_ENABLED=true $w/bin/whizz start`";
            sleep 15
        done
        ;;
    stop)
        header $*
        for w in _cluster/n*; do
            echo "Stopping node : `basename $w` `$w/bin/whizz stop`";
        done
        ;;
    restart)
        header $*
        for w in _cluster/n*; do
            echo "Restarting node : `basename $w` ";
            echo "  Stopping node : `basename $w` `WHIZZ_CLUSTERING_ENABLED=true $w/bin/whizz stop`";
            echo "  Starting node : `basename $w` `WHIZZ_CLUSTERING_ENABLED=true $w/bin/whizz start`";
            sleep 15
        done
        ;;
    ping)
        header $*
        for w in _cluster/n*; do
            echo "Pinging node : `basename $w` `$w/bin/whizz ping`";
        done
        ;;
    vping)
        header $*
        _cluster/n3/bin/whizz_ds_console ping
        ;;
    version)
        header $*
        _cluster/n3/bin/whizz_ds_console version
        ;;
    join)
        header $*
        for w in _cluster/n{2,3}; do
            $w/bin/whizz_ds_console join "whizz1@127.0.0.1"
        done
        ;;
    leave)
        header $*
        for w in _cluster/n{2,3}; do
            $w/bin/whizz_ds_console leave "whizz1@127.0.0.1"
        done
        ;;
    dumpy)
        header $1
        find _cluster -name "erl_crash.dump" -exec bin/crash_dump_print {} \;
        ;;
    deps)
        header $*
        shift
        escript deps/recon/script/app_deps.erl $*
        ;;
    diag)
        header $*
        shift
        _cluster/n1/bin/whizz_ds_console diag $*
        _cluster/n2/bin/whizz_ds_console diag $*
        _cluster/n3/bin/whizz_ds_console diag $*
        ;;
    ringready)
        header $*
        _cluster/n1/bin/whizz_ds_console ringready
        _cluster/n2/bin/whizz_ds_console ringready
        _cluster/n3/bin/whizz_ds_console ringready
        ;;
    cluster[_-]info)
        header $1
        shift
        _cluster/n3/bin/whizz_ds_console cluster_info out.html whizz1@127.0.0.1 whizz2@127.0.0.1 whizz3@127.0.0.1
        mv _cluster/n3/out.html cluster_info.html
        open cluster_info.html
        ;;
    attach)
        header $*
        shift
        if [ "$#" -eq "1" ];
        then
            node=$1
            if [ -d _cluster/$1 ];
            then
                _cluster/$1/bin/whizz attach $node
            else
                echo -e "${white}Invalid node: ${bold}${red}$node${reset}"
            fi
        else
            echo -e "${white}Must specify a node to attach to, one of: ${bold}${white}[ ${green}n1 n2 n3${white} ]${reset}"
        fi
        ;;
    console)
        header $*
        shift
        if [ "$#" -eq "1" ];
        then
            node=$1
            if [ -d _cluster/$1 ];
            then
                echo -e "${reset}"
                WHIZZ_CLUSTERING_ENABLED=true _cluster/$1/bin/whizz console $node
            else
                echo -e "${white}Invalid node: ${bold}${red}$node${reset}"
            fi
        else
            echo -e "${white}Must specify a node to launch console to, one of: ${bold}${white}[ ${green}n1 n2 n3${white} ]${reset}"
        fi
        ;;
    help)
        usage
        exit 0
        ;;
    *)
        echo -e "${white}Invalid command: ${bold}${red}$script${reset}"
        usage
        exit 1
        ;;
esac

ok

exit 0

# member status
#_cluster/n1/whizz-cluster-admin member-status

